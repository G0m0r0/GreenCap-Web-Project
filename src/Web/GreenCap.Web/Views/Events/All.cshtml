@using GreenCap.Data.Models
@using Microsoft.AspNetCore.Identity
@using GreenCap.Web.ViewModels.OutputViewModel
@inject SignInManager<ApplicationUser> SignInManager
@model EventsListOutputViewModel


@{ this.ViewData["Title"] = "All events " + Model.PageNumber; }

<div class="jumbotron bg-gradient-success">

    @if (Model.PageNumber == 1)
    {
<div class="jumbotron bg-dark">
    <h1 class="display-3 text-primary text-center">Take a part in events happening around you!</h1>
</div>}
    @foreach (var eventModel in this.Model.Events)
    {
<div class="card mb-3 text-center bg-gradient-dark">
    <h3 class="card-header display-3 text-primary">@eventModel.Name</h3>
    <div class="card-body">
        <h6 class="card-subtitle text-muted">Event duration: @eventModel.StartDate - @eventModel.EndDate</h6>
    </div>
    <div class="container">
        <img class="card-img-top" src=@eventModel.ImagePath alt="No available image." />
    </div>
    <div class="card-body">
        <p class="card-text text-light">@eventModel.Description</p>
    </div>
    <ul class="list-group list-group-flush text-left text-info">
        <li class="list-group-item text-center">Total needed people: @eventModel.TotalPeople</li>
        <div class="container bg-gradient-info">
            <p class="float-right text-dark">100%</p>
            <p class="text-dark">0%</p>
            <div class="progress">
                <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary" role="progressbar" style="width: @((eventModel.TotalPeople-eventModel.NeededPeople)*(100/eventModel.TotalPeople))%" aria-valuenow="@((eventModel.TotalPeople-eventModel.NeededPeople)*(100/eventModel.TotalPeople))" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
            @if (eventModel.NeededPeople >= 0)
            {
                <p class="text-center text-dark">@eventModel.NeededPeople left</p> }
            else
            {
                <p class="text-center text-dark">@Math.Abs(eventModel.NeededPeople) extra</p>
            }
        </div>
            <li class="list-group-item">Hosted by: <p class="text-muted">@eventModel.HostedByNames</p></li>
            <li class="list-group-item">Sign in users: <p class="text-muted">@eventModel.SignedInByNames </p> </li>
    </ul>
        @if (this.SignInManager.IsSignedIn(this.User))
        {
         <div class="card-body" id="@eventModel.Id">
            @if (!eventModel.SignedInByNames.Contains(this.User.Identity.Name.Split('@', StringSplitOptions.RemoveEmptyEntries)[0]))
            {
                <a class="btn btn-success btn-lg float-left m-2" href="/Events/Join?id=@eventModel.Id" role="button">Join event</a> 
            }
            else
            {
                <a class="btn btn-warning btn-lg float-left m-2" href="/Events/Cancel?id=@eventModel.Id" role="button">Cancel attending</a>
            }
            @if (eventModel.HostedByNames.Contains(this.User.Identity.Name.Split('@', StringSplitOptions.RemoveEmptyEntries)[0]))
            {
                <form method="post" class=" m-1" asp-controller="Events" asp-action="Delete" id="deleteForm" asp-route-id="@eventModel.Id">
                    <button class="btn btn-danger btn-lg m-1 float-right" data-toggle="modal" data-target="#deleteModal">Delete</button>
                </form>
                <a class="btn btn-secondary btn-lg m-1 float-right" href="/Events/Edit?id=@eventModel.Id" role="button">Edit</a>
            }
        </div>
    }
    <div class="card-footer text-muted text-left">
        @eventModel.CretedDaysAgo
    </div>
</div>}
</div>

<partial name="_PagingPartial" model="@Model" />
